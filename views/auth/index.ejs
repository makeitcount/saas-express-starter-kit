<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
  </head>

  <body>

    <h1>Sign In</h1>
    <form id="signin-form" onsubmit="signin(); return false;">
      <span id="signin-error" style="color:red;"></span>
      <br/><br/>
      <label>Email</label><br/>
      <input name="email" type="text" placeholder="Your Email" autocomplete="email" required><br />
      <br/>
      <label>Password</label><br/>
      <input name="password" type="password" minlength="8" placeholder="Password" autocomplete="current-password"><br />
      <br/>
      <input type="submit" value="Sign In" />
      <br/><br/>
      <a href="#" onclick="sendPasswordResetToken()">Forgot password?</a>
    </form>

    <br /><br />
    <h1>Create New Account</h1>
    <form id="signup-form" onsubmit="signup(); return false;">
      <span id="signup-error" style="color:red;"></span>
      <span id="signup-success" style="color: green;"></span>
      <br/><br/>
      <label>Email</label><br/>
      <input name="email" type="email" placeholder="Your Email" autocomplete="email" required><br />
      <br/>
      <label>Name</label><br/>
      <input name="name" type="text" placeholder="Your Full Name" autocomplete="name" required><br />
      <br/>
      <label>Password</label><br/>
      <input name="password" type="password" minlength="8" placeholder="Password" autocomplete="current-password" required><br />
      <br/>
      <input type="submit" value="Sign Up" />
    </form>

  </body>

  <%- include('../partials/footer.ejs') %>
  <script>
    /**TODO : now that we have added supertokens-web-sdk and supertokens's emailpassword.js, 
     * we can refactor following fn to use sdk api
     **/
    async function signup() {
      let formFields = DOM.getFormFields("signup-form");
      if (!formFields || formFields.length < 1) {
        alert("Necessary input fields are missing");
        return false;
      }
      DOM.loader().show("Registering your account...");
      const response = await fetch(
        "<%= process.env.SITE_DOMAIN_URL %>/api/signup",
        {
          method: "POST",
          headers: {
            rid: "emailpassword",
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ formFields: formFields })
        });
      let result = await response.json();
      console.log(result);
      DOM.loader().hide();
      if(result.status==="OK"){
        // alert(JSON.stringify(result.user));
        window.location.replace("/user/profile");
      } else {
        if(result.status && result.status=="FIELD_ERROR"){
          let errorMessage = "";
          if(result.formFields){
            result.formFields.forEach(function(formField){
              // formField - {id: nameOfInput, error: errorTextForTheInput }
              errorMessage += formField.error+" "
            })
          }
          document.getElementById('signup-error').textContent = errorMessage || result.status;
        } else {
          document.getElementById('signup-error').textContent = "Some error occurred";
        } 
      }
    }

    async function signin() {
      console.debug("Signing in...")
      let formFields = DOM.getFormFields("signin-form");
      if (!formFields || formFields.length < 1) {
        alert("Necessary input fields are missing");
        return false;
      }
      DOM.loader().show("Signing in...");
      console.debug(JSON.stringify(formFields))
      if(formFields.length==1 && formFields[0].id == "email"){
        console.debug("Signing in with passwordless");
        return passwordlessLogin(formFields[0].value);
      }
      console.debug("Signing in with email/password");
      const response = await fetch(
        "<%= process.env.SITE_DOMAIN_URL %>/api/signin",
        {
          method: "POST",
          headers: {
            rid: "emailpassword",
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ formFields: formFields })
        }
      );
      let result = await response.json();
      console.log(result);
      DOM.loader().hide();
      if(result.status==="OK"){
        // alert(JSON.stringify(result.user));
        window.location.replace('/user/dashboard');
      } else {
        if(result.status){
          if(result.status=="WRONG_CREDENTIALS_ERROR"){
            document.getElementById('signin-error').textContent = "Invalid username or password"
          } else if(result.status && result.status=="FIELD_ERROR"){
            let errorMessage = "";
            if(result.formFields){
              result.formFields.forEach(function(formField){
                // formField - {id: nameOfInput, error: errorTextForTheInput }
                errorMessage += formField.error+" "
              })
            }
            document.getElementById('signin-error').textContent = errorMessage || result.status;
          }
        } else {
          document.getElementById('signin-error').textContent = "Some error occurred";
        }
      }
    }

    async function sendPasswordResetToken(){
      let formFields = DOM.getFormFields("signin-form", { fields: ["email"] });
      if(!formFields || formFields.length<1){
        alert("Plese enter your email");
        return null;
      }
      DOM.loader().show("Sending password reset link...");
      supertokensEmailPassword.sendPasswordResetEmail({formFields: formFields})
        .then(function(result){
          if(result.status){
            if(result.status=="OK"){
              document.getElementById('signin-error').textContent = "Sent password reset link to your email."
            } else if(result.status && result.status=="FIELD_ERROR"){
              let errorMessage = "";
              if(result.formFields){
                result.formFields.forEach(function(formField){
                  // formField - {id: nameOfInput, error: errorTextForTheInput }
                  errorMessage += formField.error+" "
                })
              }
              document.getElementById('signin-error').textContent = errorMessage || result.status;
            }
          } else {
            document.getElementById('signin-error').textContent = "Some error occurred";
          }
        })
        .finally(function(){
          DOM.loader().hide();
        })
    }

    async function passwordlessLogin(email){
      let response = await supertokensPasswordless.createCode({ email: email });
      if(response.status == "OK"){
        // Show the box to enter code
        const userInputCode = window.prompt("Enter the code received on your email");
        let verificationResponse = await supertokensPasswordless.consumeCode({ userInputCode: userInputCode });
        if(res.createdUser){ 
          console.log(JSON.stringify(res.user));
        }
      }
    }
  </script>
</html>
