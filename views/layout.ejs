<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
  </head>

  <body>

    <div id="loggedInInfo">Logged in as <span id="username"></span><button onclick="logout()">Logout</button></div>
    <h1>User Profile</h1>
    <form id="profile-form" onsubmit="updateProfile(); return false;">
      <span id="profile-form-error" style="color:red;"></span>
      <span id="profile-form-success" style="color:green;"></span>
      <br/>
      <label>Email<sup>*</sup></label><br/>
      <input name="email" type="text" placeholder="Your Email" required><br />
      <br/>
      <label>Name</label><br/>
      <input name="name" type="text" placeholder="Your Full Name"><br />
      <br/>
      <label>Phone</label><br/>
      <input name="phone" type="phone" placeholder="Your Phone No."><br />
      <br/>
      <label>Current City</label><br/>
      <input name="currentCity" type="text" placeholder="Your Current City"><br />
      <br/>
      <input type="submit" value="Update Profile" />
    </form>

  </body>
  <script src="https://cdn.jsdelivr.net/gh/supertokens/supertokens-website/bundle/bundle.js"></script>
  <script>
    supertokens.init({
      apiDomain: "<%= process.env.SITE_DOMAIN_URL %>",
      apiBasePath: "/api",
      onHandleEvent: (context) => {
        if (context.action === "UNAUTHORISED") {
            window.location.replace('/auth?redirectToPath=/user/profile');
            // called when the user doesn't have a valid session but made a request that requires one
            // NOTE: This event can fire multiple times

            if (context.sessionExpiredOrRevoked) {
                // the sessionExpiredOrRevoked property is set to true if the current call cleared the session from storage
                // this happens only once, even if multiple tabs sharing the same session are open, making it useful for analytics purposes
            }
        }
      }
    });
    // loginCheck();
    // async function loginCheck(){
    //   let isLoggedIn = await supertokens.doesSessionExist();
    //   if(!isLoggedIn){
    //     window.location.replace('/auth?redirectToPath=/user/profile');
    //   } else {
    //     let payload = await supertokens.getAccessTokenPayloadSecurely();
    //     console.log(payload);
    //   }
    // }

    async function logout(){
      await supertokens.signOut();
      window.location.replace('/auth');
    }
  </script>
</html>
